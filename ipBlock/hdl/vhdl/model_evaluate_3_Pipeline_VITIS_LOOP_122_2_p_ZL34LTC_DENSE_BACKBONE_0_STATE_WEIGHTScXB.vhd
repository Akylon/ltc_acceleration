-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity model_evaluate_3_Pipeline_VITIS_LOOP_122_2_p_ZL34LTC_DENSE_BACKBONE_0_STATE_WEIGHTScXB is 
    generic(
             DataWidth     : integer := 7; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of model_evaluate_3_Pipeline_VITIS_LOOP_122_2_p_ZL34LTC_DENSE_BACKBONE_0_STATE_WEIGHTScXB is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1011100", 1 => "1110110", 2 => "0000010", 3 => "0000110", 
    4 => "0001010", 5 => "0000101", 6 => "0010010", 7 => "1110100", 
    8 => "1111110", 9 => "1111111", 10 => "1110001", 11 => "1011010", 
    12 => "1111000", 13 => "0010010", 14 => "0100010", 15 => "0010101", 
    16 => "0000111", 17 => "0000000", 18 => "0000100", 19 => "1101110", 
    20 => "0001000", 21 => "0000110", 22 => "1110111", 23 => "1111110", 
    24 => "0000111", 25 => "0011010", 26 => "1110010", 27 => "0011000", 
    28 => "0011010", 29 => "1010101", 30 => "1101011", 31 => "1111110", 
    32 => "1101011", 33 => "0011110", 34 => "0000010", 35 => "1011101", 
    36 => "0011110", 37 => "1101000", 38 => "0001001", 39 => "0000011", 
    40 => "0000010", 41 => "0001001", 42 => "0100100", 43 => "1111001", 
    44 => "0001110", 45 => "0010100", 46 => "0000010", 47 => "0000111", 
    48 => "0011010", 49 => "0010001", 50 => "0010111", 51 => "1101010", 
    52 => "1110100", 53 => "0001100", 54 => "1111000", 55 => "0100011", 
    56 => "1000011", 57 => "1001011", 58 => "0110000", 59 => "1011100", 
    60 => "1100100", 61 => "0000101", 62 => "1101000", 63 => "0010001", 
    64 => "0001010", 65 => "0001011", 66 => "1101001", 67 => "1101100", 
    68 => "1111010", 69 => "0000011", 70 => "0000000", 71 => "1110111", 
    72 => "1101010", 73 => "0011101", 74 => "1111000", 75 => "1100010", 
    76 => "0000111", 77 => "1111110", 78 => "0011001", 79 => "0000000", 
    80 => "1111011", 81 => "0001010", 82 => "1110100", 83 => "0001110", 
    84 => "0001100", 85 => "0000101", 86 => "0001011", 87 => "0001100", 
    88 => "0000000", 89 => "1110111", 90 => "1110110", 91 => "1111100", 
    92 => "1111110", 93 => "1100000", 94 => "0001101", 95 => "1101100", 
    96 => "0000011", 97 => "0000110", 98 => "1111001", 99 => "1111010", 
    100 => "0010100", 101 => "0000000", 102 => "0001000", 103 => "0000000", 
    104 => "1110001", 105 => "1110011", 106 => "1100101", 107 => "1111011", 
    108 => "0011111", 109 => "0010101", 110 => "1110000", 111 => "0010101", 
    112 => "0010011", 113 => "0001011", 114 => "0010000", 115 => "0000000", 
    116 => "1101101", 117 => "1100101", 118 => "0000111", 119 => "0100100", 
    120 => "0000010", 121 => "1100110", 122 => "0000111", 123 => "1101010", 
    124 => "1110101", 125 => "0011111", 126 => "1110110", 127 => "1101101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

