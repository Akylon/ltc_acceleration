-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity model_evaluate_3_Pipeline_VITIS_LOOP_122_2_p_ZL34LTC_DENSE_BACKBONE_0_STATE_WEIGHTSdfE is 
    generic(
             DataWidth     : integer := 7; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of model_evaluate_3_Pipeline_VITIS_LOOP_122_2_p_ZL34LTC_DENSE_BACKBONE_0_STATE_WEIGHTSdfE is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000111", 1 => "0001001", 2 => "0001010", 3 => "0000001", 
    4 => "1100111", 5 => "1110010", 6 => "1111110", 7 => "1111110", 
    8 => "1110100", 9 => "0001001", 10 => "1101001", 11 => "1101101", 
    12 => "1010001", 13 => "0000010", 14 => "1111100", 15 => "0001110", 
    16 => "1111111", 17 => "1110000", 18 => "1100011", 19 => "0001011", 
    20 => "1111000", 21 => "1110110", 22 => "0001010", 23 => "1110001", 
    24 => "1101110", 25 => "1101011", 26 => "0010111", 27 => "1010011", 
    28 => "1110101", 29 => "0001110", 30 => "1111101", 31 => "0000001", 
    32 => "0000010", 33 => "1111010", 34 => "0000111", 35 => "0101100", 
    36 => "0001110", 37 => "0000010", 38 => "0001110", 39 => "0011100", 
    40 => "0000001", 41 => "0100000", 42 => "0001111", 43 => "0010001", 
    44 => "0000000", 45 => "0010111", 46 => "1110011", 47 => "0001000", 
    48 => "0001010", 49 => "0011010", 50 => "0011111", 51 => "1100111", 
    52 => "1111000", 53 => "1111100", 54 => "0100110", 55 => "1101101", 
    56 => "1110110", 57 => "0001000", 58 => "0010110", 59 => "1110111", 
    60 => "0000001", 61 => "1110001", 62 => "0000010", 63 => "1111100", 
    64 => "1111011", 65 => "0001000", 66 => "1110111", 67 => "1110101", 
    68 => "0010010", 69 => "0000100", 70 => "1110110", 71 => "0000111", 
    72 => "1101101", 73 => "1100011", 74 => "1110010", 75 => "1100010", 
    76 => "0010011", 77 => "1100010", 78 => "1110010", 79 => "0001101", 
    80 => "1110100", 81 => "1110000", 82 => "0000101", 83 => "1110010", 
    84 => "0001010", 85 => "1110001", 86 => "1110111", 87 => "1101110", 
    88 => "0011010", 89 => "1110011", 90 => "0010010", 91 => "1111101", 
    92 => "0001001", 93 => "0000011", 94 => "1110100", 95 => "0010111", 
    96 => "0001100", 97 => "0010111", 98 => "1111100", 99 => "0010000", 
    100 => "1110110", 101 => "0000100", 102 => "0000011", 103 => "1111101", 
    104 => "1111000", 105 => "0011011", 106 => "0000100", 107 => "0000110", 
    108 => "1111111", 109 => "1111100", 110 => "1101101", 111 => "1111111", 
    112 => "1111100", 113 => "0001100", 114 => "1101110", 115 => "1101001", 
    116 => "1101111", 117 => "1111101", 118 => "0001010", 119 => "0001100", 
    120 => "1101100", 121 => "1110001", 122 => "0010101", 123 => "0001111", 
    124 => "1111011", 125 => "0001100", 126 => "1111011", 127 => "0000110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

