-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity model_evaluate_3_Pipeline_VITIS_LOOP_122_2_p_ZL34LTC_DENSE_BACKBONE_0_STATE_WEIGHTSdjF is 
    generic(
             DataWidth     : integer := 8; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of model_evaluate_3_Pipeline_VITIS_LOOP_122_2_p_ZL34LTC_DENSE_BACKBONE_0_STATE_WEIGHTSdjF is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "11111010", 1 => "00000010", 2 => "11001010", 3 => "11111111", 
    4 => "11110001", 5 => "11101001", 6 => "00101110", 7 => "11011111", 
    8 => "11100010", 9 => "11111010", 10 => "00001111", 11 => "11101000", 
    12 => "11101010", 13 => "11111111", 14 => "11100010", 15 => "00000000", 
    16 => "11110011", 17 => "11100011", 18 => "11111100", 19 => "00011000", 
    20 => "11110101", 21 => "11110010", 22 => "11110100", 23 => "11101010", 
    24 => "00000100", 25 => "11110110", 26 => "11110100", 27 => "00010010", 
    28 => "00110001", 29 => "11111010", 30 => "00001000", 31 => "11101001", 
    32 => "10111010", 33 => "11110111", 34 => "00001011", 35 => "11110001", 
    36 => "11001111", 37 => "00001011", 38 => "11111110", 39 => "00000111", 
    40 => "11111110", 41 => "00001111", 42 => "11011101", 43 => "11111011", 
    44 => "11010111", 45 => "00000000", 46 => "00010010", 47 => "11110010", 
    48 => "00000011", 49 => "00000001", 50 => "11101101", 51 => "11110010", 
    52 => "11000100", 53 => "11111100", 54 => "00010100", 55 => "00110101", 
    56 => "00000011", 57 => "00010110", 58 => "01001100", 59 => "00100111", 
    60 => "11101101", 61 => "11110010", 62 => "11011010", 63 => "01000010", 
    64 => "11110000", 65 => "11111000", 66 => "11111000", 67 => "00001000", 
    68 => "00001001", 69 => "11111101", 70 => "00011110", 71 => "11101111", 
    72 => "11101101", 73 => "11110110", 74 => "11111100", 75 => "00000100", 
    76 => "11110100", 77 => "11101010", 78 => "00000100", 79 => "11101010", 
    80 => "00000000", 81 => "11101111", 82 => "11111101", 83 => "11101110", 
    84 => "11110000", 85 => "11111110", 86 => "11111010", 87 => "11100100", 
    88 => "00001011", 89 => "00010001", 90 => "11111000", 91 => "11111011", 
    92 => "00001110", 93 => "11110100", 94 => "11110000", 95 => "11110000", 
    96 => "00000000", 97 => "11111110", 98 => "11111110", 99 => "11110111", 
    100 => "00010110", 101 => "00000100", 102 => "11110110", 103 => "00011000", 
    104 => "00011011", 105 => "11110010", 106 => "00100001", 107 => "00000001", 
    108 => "00010110", 109 => "00001000", 110 => "00001010", 111 => "00001101", 
    112 => "00000001", 113 => "00001000", 114 => "00001100", 115 => "00001010", 
    116 => "11110111", 117 => "00001111", 118 => "00001110", 119 => "00010000", 
    120 => "00011000", 121 => "11111101", 122 => "11101011", 123 => "00001111", 
    124 => "00001001", 125 => "11111100", 126 => "11100011", 127 => "11111110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

