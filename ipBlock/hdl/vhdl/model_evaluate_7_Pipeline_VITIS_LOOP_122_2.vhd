-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity model_evaluate_7_Pipeline_VITIS_LOOP_122_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputs_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    inputs_ce0 : OUT STD_LOGIC;
    inputs_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    conv4_i_1624_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_1624_out_ap_vld : OUT STD_LOGIC;
    conv4_i_1523_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_1523_out_ap_vld : OUT STD_LOGIC;
    conv4_i_1422_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_1422_out_ap_vld : OUT STD_LOGIC;
    conv4_i_1321_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_1321_out_ap_vld : OUT STD_LOGIC;
    conv4_i_1220_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_1220_out_ap_vld : OUT STD_LOGIC;
    conv4_i_1119_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_1119_out_ap_vld : OUT STD_LOGIC;
    conv4_i_1018_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_1018_out_ap_vld : OUT STD_LOGIC;
    conv4_i_917_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_917_out_ap_vld : OUT STD_LOGIC;
    conv4_i_816_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_816_out_ap_vld : OUT STD_LOGIC;
    conv4_i_715_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_715_out_ap_vld : OUT STD_LOGIC;
    conv4_i_614_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_614_out_ap_vld : OUT STD_LOGIC;
    conv4_i_513_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_513_out_ap_vld : OUT STD_LOGIC;
    conv4_i_412_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_412_out_ap_vld : OUT STD_LOGIC;
    conv4_i_311_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_311_out_ap_vld : OUT STD_LOGIC;
    conv4_i_210_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_210_out_ap_vld : OUT STD_LOGIC;
    conv4_i_19_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i_19_out_ap_vld : OUT STD_LOGIC;
    conv4_i8_out : OUT STD_LOGIC_VECTOR (20 downto 0);
    conv4_i8_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of model_evaluate_7_Pipeline_VITIS_LOOP_122_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv10_2C0 : STD_LOGIC_VECTOR (9 downto 0) := "1011000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln122_reg_1273 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal DENSE_OUT_WEIGHTS_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal DENSE_OUT_WEIGHTS_V_ce0 : STD_LOGIC;
    signal DENSE_OUT_WEIGHTS_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal DENSE_OUT_WEIGHTS_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal DENSE_OUT_WEIGHTS_V_ce1 : STD_LOGIC;
    signal DENSE_OUT_WEIGHTS_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal feature_reg_1262 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln122_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln130_fu_552_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln130_reg_1287 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1494_fu_568_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1494_reg_1299 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal zext_ln130_1_cast_fu_580_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln130_1_cast_reg_1330 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal zext_ln130_3_cast_fu_611_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln130_3_cast_reg_1356 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln130_fu_623_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln130_reg_1366 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal zext_ln122_1_fu_670_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln122_1_reg_1416 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln122_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln130_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_1_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln130_2_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_3_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln130_4_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_5_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln130_6_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_7_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln130_8_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_9_fu_733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln130_10_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_11_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln130_12_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_13_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln130_14_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_15_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal feature_1_fu_92 : STD_LOGIC_VECTOR (6 downto 0);
    signal feature_2_fu_540_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_feature : STD_LOGIC_VECTOR (6 downto 0);
    signal conv4_i8_fu_96 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_981_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_19_fu_100 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_990_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_210_fu_104 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_999_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_311_fu_108 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1007_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_412_fu_112 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1015_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_513_fu_116 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1023_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_614_fu_120 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1031_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_715_fu_124 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1039_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_816_fu_128 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1047_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_917_fu_132 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1055_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_1018_fu_136 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1063_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_1119_fu_140 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1071_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_1220_fu_144 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1079_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal conv4_i_1321_fu_148 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1087_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_1422_fu_152 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1095_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_1523_fu_156 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1103_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal conv4_i_1624_fu_160 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1111_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal sext_ln130_fu_592_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln122_2_fu_600_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln130_1_fu_648_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln130_2_fu_656_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln130_7_cast_fu_681_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln130_1_fu_693_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln130_9_cast_fu_726_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln130_2_fu_738_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln130_3_fu_770_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln130_4_fu_778_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln130_5_fu_808_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln130_6_fu_816_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln130_15_cast_fu_846_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_981_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_990_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_999_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1007_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1015_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1023_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1031_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1039_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1047_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1055_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1063_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1071_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1079_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1087_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1095_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1103_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1111_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component model_mac_muladd_8s_8s_21s_21_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component model_evaluate_7_Pipeline_VITIS_LOOP_122_2_DENSE_OUT_WEIGHTS_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component model_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    DENSE_OUT_WEIGHTS_V_U : component model_evaluate_7_Pipeline_VITIS_LOOP_122_2_DENSE_OUT_WEIGHTS_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 1088,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => DENSE_OUT_WEIGHTS_V_address0,
        ce0 => DENSE_OUT_WEIGHTS_V_ce0,
        q0 => DENSE_OUT_WEIGHTS_V_q0,
        address1 => DENSE_OUT_WEIGHTS_V_address1,
        ce1 => DENSE_OUT_WEIGHTS_V_ce1,
        q1 => DENSE_OUT_WEIGHTS_V_q1);

    mac_muladd_8s_8s_21s_21_4_1_U2313 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q1,
        din1 => grp_fu_981_p1,
        din2 => conv4_i8_fu_96,
        ce => ap_const_logic_1,
        dout => grp_fu_981_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2314 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q0,
        din1 => grp_fu_990_p1,
        din2 => conv4_i_19_fu_100,
        ce => ap_const_logic_1,
        dout => grp_fu_990_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2315 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q1,
        din1 => grp_fu_999_p1,
        din2 => conv4_i_210_fu_104,
        ce => ap_const_logic_1,
        dout => grp_fu_999_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2316 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q0,
        din1 => grp_fu_1007_p1,
        din2 => conv4_i_311_fu_108,
        ce => ap_const_logic_1,
        dout => grp_fu_1007_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2317 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q1,
        din1 => grp_fu_1015_p1,
        din2 => conv4_i_412_fu_112,
        ce => ap_const_logic_1,
        dout => grp_fu_1015_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2318 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q0,
        din1 => grp_fu_1023_p1,
        din2 => conv4_i_513_fu_116,
        ce => ap_const_logic_1,
        dout => grp_fu_1023_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2319 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q1,
        din1 => grp_fu_1031_p1,
        din2 => conv4_i_614_fu_120,
        ce => ap_const_logic_1,
        dout => grp_fu_1031_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2320 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q0,
        din1 => grp_fu_1039_p1,
        din2 => conv4_i_715_fu_124,
        ce => ap_const_logic_1,
        dout => grp_fu_1039_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2321 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q1,
        din1 => grp_fu_1047_p1,
        din2 => conv4_i_816_fu_128,
        ce => ap_const_logic_1,
        dout => grp_fu_1047_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2322 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q0,
        din1 => grp_fu_1055_p1,
        din2 => conv4_i_917_fu_132,
        ce => ap_const_logic_1,
        dout => grp_fu_1055_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2323 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q1,
        din1 => grp_fu_1063_p1,
        din2 => conv4_i_1018_fu_136,
        ce => ap_const_logic_1,
        dout => grp_fu_1063_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2324 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q0,
        din1 => grp_fu_1071_p1,
        din2 => conv4_i_1119_fu_140,
        ce => ap_const_logic_1,
        dout => grp_fu_1071_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2325 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q1,
        din1 => grp_fu_1079_p1,
        din2 => conv4_i_1220_fu_144,
        ce => ap_const_logic_1,
        dout => grp_fu_1079_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2326 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q0,
        din1 => grp_fu_1087_p1,
        din2 => conv4_i_1321_fu_148,
        ce => ap_const_logic_1,
        dout => grp_fu_1087_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2327 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q1,
        din1 => grp_fu_1095_p1,
        din2 => conv4_i_1422_fu_152,
        ce => ap_const_logic_1,
        dout => grp_fu_1095_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2328 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q0,
        din1 => grp_fu_1103_p1,
        din2 => conv4_i_1523_fu_156,
        ce => ap_const_logic_1,
        dout => grp_fu_1103_p3);

    mac_muladd_8s_8s_21s_21_4_1_U2329 : component model_mac_muladd_8s_8s_21s_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 21,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => DENSE_OUT_WEIGHTS_V_q0,
        din1 => grp_fu_1111_p1,
        din2 => conv4_i_1624_fu_160,
        ce => ap_const_logic_1,
        dout => grp_fu_1111_p3);

    flow_control_loop_pipe_sequential_init_U : component model_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    conv4_i8_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i8_fu_96 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv4_i8_fu_96 <= grp_fu_981_p3;
            end if; 
        end if;
    end process;

    conv4_i_1018_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_1018_fu_136 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                conv4_i_1018_fu_136 <= grp_fu_1063_p3;
            end if; 
        end if;
    end process;

    conv4_i_1119_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_1119_fu_140 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                conv4_i_1119_fu_140 <= grp_fu_1071_p3;
            end if; 
        end if;
    end process;

    conv4_i_1220_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    conv4_i_1220_fu_144 <= ap_const_lv21_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    conv4_i_1220_fu_144 <= grp_fu_1079_p3;
                end if;
            end if; 
        end if;
    end process;

    conv4_i_1321_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    conv4_i_1321_fu_148 <= ap_const_lv21_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    conv4_i_1321_fu_148 <= grp_fu_1087_p3;
                end if;
            end if; 
        end if;
    end process;

    conv4_i_1422_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_1422_fu_152 <= ap_const_lv21_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv4_i_1422_fu_152 <= grp_fu_1095_p3;
            end if; 
        end if;
    end process;

    conv4_i_1523_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_1523_fu_156 <= ap_const_lv21_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv4_i_1523_fu_156 <= grp_fu_1103_p3;
            end if; 
        end if;
    end process;

    conv4_i_1624_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_1624_fu_160 <= ap_const_lv21_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                conv4_i_1624_fu_160 <= grp_fu_1111_p3;
            end if; 
        end if;
    end process;

    conv4_i_19_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_19_fu_100 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv4_i_19_fu_100 <= grp_fu_990_p3;
            end if; 
        end if;
    end process;

    conv4_i_210_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_210_fu_104 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                conv4_i_210_fu_104 <= grp_fu_999_p3;
            end if; 
        end if;
    end process;

    conv4_i_311_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_311_fu_108 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                conv4_i_311_fu_108 <= grp_fu_1007_p3;
            end if; 
        end if;
    end process;

    conv4_i_412_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_412_fu_112 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                conv4_i_412_fu_112 <= grp_fu_1015_p3;
            end if; 
        end if;
    end process;

    conv4_i_513_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_513_fu_116 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                conv4_i_513_fu_116 <= grp_fu_1023_p3;
            end if; 
        end if;
    end process;

    conv4_i_614_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_614_fu_120 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                conv4_i_614_fu_120 <= grp_fu_1031_p3;
            end if; 
        end if;
    end process;

    conv4_i_715_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_715_fu_124 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                conv4_i_715_fu_124 <= grp_fu_1039_p3;
            end if; 
        end if;
    end process;

    conv4_i_816_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_816_fu_128 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                conv4_i_816_fu_128 <= grp_fu_1047_p3;
            end if; 
        end if;
    end process;

    conv4_i_917_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv4_i_917_fu_132 <= ap_const_lv21_0;
            elsif (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                conv4_i_917_fu_132 <= grp_fu_1055_p3;
            end if; 
        end if;
    end process;

    feature_1_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln122_fu_534_p2 = ap_const_lv1_0))) then 
                    feature_1_fu_92 <= feature_2_fu_540_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    feature_1_fu_92 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln130_reg_1366 <= add_ln130_fu_623_p2;
                    zext_ln130_3_cast_reg_1356(6 downto 0) <= zext_ln130_3_cast_fu_611_p3(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                feature_reg_1262 <= ap_sig_allocacmp_feature;
                icmp_ln122_reg_1273 <= icmp_ln122_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sext_ln1494_reg_1299 <= sext_ln1494_fu_568_p1;
                    zext_ln130_1_cast_reg_1330(6 downto 0) <= zext_ln130_1_cast_fu_580_p3(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln122_fu_534_p2 = ap_const_lv1_0))) then
                xor_ln130_reg_1287 <= xor_ln130_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    zext_ln122_1_reg_1416(6 downto 0) <= zext_ln122_1_fu_670_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln130_1_cast_reg_1330(7) <= '1';
    zext_ln130_3_cast_reg_1356(8 downto 7) <= "10";
    zext_ln122_1_reg_1416(9 downto 7) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter0_stage2, ap_block_pp0_stage9_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    DENSE_OUT_WEIGHTS_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0, zext_ln130_fu_558_p1, ap_block_pp0_stage1, zext_ln130_2_fu_595_p1, ap_block_pp0_stage2, zext_ln130_4_fu_629_p1, ap_block_pp0_stage3, zext_ln130_6_fu_659_p1, ap_block_pp0_stage4, zext_ln130_8_fu_699_p1, ap_block_pp0_stage5, zext_ln130_10_fu_743_p1, ap_block_pp0_stage6, zext_ln130_12_fu_781_p1, ap_block_pp0_stage7, zext_ln130_14_fu_819_p1, zext_ln130_15_fu_853_p1, ap_block_pp0_stage8)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                DENSE_OUT_WEIGHTS_V_address0 <= zext_ln130_15_fu_853_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                DENSE_OUT_WEIGHTS_V_address0 <= zext_ln130_14_fu_819_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                DENSE_OUT_WEIGHTS_V_address0 <= zext_ln130_12_fu_781_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                DENSE_OUT_WEIGHTS_V_address0 <= zext_ln130_10_fu_743_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                DENSE_OUT_WEIGHTS_V_address0 <= zext_ln130_8_fu_699_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                DENSE_OUT_WEIGHTS_V_address0 <= zext_ln130_6_fu_659_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                DENSE_OUT_WEIGHTS_V_address0 <= zext_ln130_4_fu_629_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                DENSE_OUT_WEIGHTS_V_address0 <= zext_ln130_2_fu_595_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                DENSE_OUT_WEIGHTS_V_address0 <= zext_ln130_fu_558_p1(11 - 1 downto 0);
            else 
                DENSE_OUT_WEIGHTS_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            DENSE_OUT_WEIGHTS_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    DENSE_OUT_WEIGHTS_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, zext_ln122_fu_546_p1, ap_block_pp0_stage0, zext_ln130_1_fu_587_p1, ap_block_pp0_stage1, zext_ln130_3_fu_618_p1, ap_block_pp0_stage2, zext_ln130_5_fu_651_p1, ap_block_pp0_stage3, zext_ln130_7_fu_688_p1, ap_block_pp0_stage4, zext_ln130_9_fu_733_p1, ap_block_pp0_stage5, zext_ln130_11_fu_773_p1, ap_block_pp0_stage6, zext_ln130_13_fu_811_p1, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                DENSE_OUT_WEIGHTS_V_address1 <= zext_ln130_13_fu_811_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                DENSE_OUT_WEIGHTS_V_address1 <= zext_ln130_11_fu_773_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                DENSE_OUT_WEIGHTS_V_address1 <= zext_ln130_9_fu_733_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                DENSE_OUT_WEIGHTS_V_address1 <= zext_ln130_7_fu_688_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                DENSE_OUT_WEIGHTS_V_address1 <= zext_ln130_5_fu_651_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                DENSE_OUT_WEIGHTS_V_address1 <= zext_ln130_3_fu_618_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                DENSE_OUT_WEIGHTS_V_address1 <= zext_ln130_1_fu_587_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                DENSE_OUT_WEIGHTS_V_address1 <= zext_ln122_fu_546_p1(11 - 1 downto 0);
            else 
                DENSE_OUT_WEIGHTS_V_address1 <= "XXXXXXXXXXX";
            end if;
        else 
            DENSE_OUT_WEIGHTS_V_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    DENSE_OUT_WEIGHTS_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            DENSE_OUT_WEIGHTS_V_ce0 <= ap_const_logic_1;
        else 
            DENSE_OUT_WEIGHTS_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    DENSE_OUT_WEIGHTS_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            DENSE_OUT_WEIGHTS_V_ce1 <= ap_const_logic_1;
        else 
            DENSE_OUT_WEIGHTS_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln130_1_fu_693_p2 <= std_logic_vector(unsigned(zext_ln122_1_fu_670_p1) + unsigned(ap_const_lv10_240));
    add_ln130_2_fu_738_p2 <= std_logic_vector(unsigned(zext_ln122_1_reg_1416) + unsigned(ap_const_lv10_2C0));
    add_ln130_fu_623_p2 <= std_logic_vector(unsigned(zext_ln122_2_fu_600_p1) + unsigned(ap_const_lv9_140));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln122_reg_1273)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_feature_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, feature_1_fu_92, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_feature <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_feature <= feature_1_fu_92;
        end if; 
    end process;

    conv4_i8_out <= conv4_i8_fu_96;

    conv4_i8_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i8_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_1018_out <= conv4_i_1018_fu_136;

    conv4_i_1018_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_1018_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_1018_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_1119_out <= conv4_i_1119_fu_140;

    conv4_i_1119_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_1119_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_1119_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_1220_out <= conv4_i_1220_fu_144;

    conv4_i_1220_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_1220_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_1220_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_1321_out <= conv4_i_1321_fu_148;

    conv4_i_1321_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_1321_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_1321_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_1422_out <= conv4_i_1422_fu_152;

    conv4_i_1422_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_1422_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_1422_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_1523_out <= conv4_i_1523_fu_156;

    conv4_i_1523_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_1523_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_1523_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_1624_out <= conv4_i_1624_fu_160;

    conv4_i_1624_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_1624_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_1624_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_19_out <= conv4_i_19_fu_100;

    conv4_i_19_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_19_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_19_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_210_out <= conv4_i_210_fu_104;

    conv4_i_210_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_210_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_210_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_311_out <= conv4_i_311_fu_108;

    conv4_i_311_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_311_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_311_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_412_out <= conv4_i_412_fu_112;

    conv4_i_412_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_412_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_412_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_513_out <= conv4_i_513_fu_116;

    conv4_i_513_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_513_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_513_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_614_out <= conv4_i_614_fu_120;

    conv4_i_614_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_614_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_614_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_715_out <= conv4_i_715_fu_124;

    conv4_i_715_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_715_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_715_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_816_out <= conv4_i_816_fu_128;

    conv4_i_816_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_816_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_816_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    conv4_i_917_out <= conv4_i_917_fu_132;

    conv4_i_917_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage2, icmp_ln122_reg_1273, ap_block_pp0_stage2_11001)
    begin
        if (((icmp_ln122_reg_1273 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv4_i_917_out_ap_vld <= ap_const_logic_1;
        else 
            conv4_i_917_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    feature_2_fu_540_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_feature) + unsigned(ap_const_lv7_1));
    grp_fu_1007_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1015_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1023_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1031_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1039_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1047_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1055_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1063_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1071_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1079_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1087_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1095_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1103_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_1111_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    grp_fu_981_p1 <= sext_ln1494_fu_568_p1(8 - 1 downto 0);
    grp_fu_990_p1 <= sext_ln1494_fu_568_p1(8 - 1 downto 0);
    grp_fu_999_p1 <= sext_ln1494_reg_1299(8 - 1 downto 0);
    icmp_ln122_fu_534_p2 <= "1" when (ap_sig_allocacmp_feature = ap_const_lv7_40) else "0";
    inputs_address0 <= zext_ln122_fu_546_p1(6 - 1 downto 0);

    inputs_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inputs_ce0 <= ap_const_logic_1;
        else 
            inputs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln130_1_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln130_1_cast_reg_1330),9));

        sext_ln130_2_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln130_reg_1287),9));

        sext_ln130_3_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln130_3_cast_reg_1356),10));

        sext_ln130_4_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln130_reg_1366),10));

        sext_ln130_5_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln130_1_cast_reg_1330),10));

        sext_ln130_6_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln130_reg_1287),10));

        sext_ln130_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln130_reg_1287),8));

        sext_ln1494_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inputs_q0),16));

    xor_ln130_fu_552_p2 <= (ap_sig_allocacmp_feature xor ap_const_lv7_40);
    zext_ln122_1_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_reg_1262),10));
    zext_ln122_2_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(feature_reg_1262),9));
    zext_ln122_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_feature),64));
    zext_ln130_10_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_2_fu_738_p2),64));
    zext_ln130_11_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_3_fu_770_p1),64));
    zext_ln130_12_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_4_fu_778_p1),64));
    zext_ln130_13_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_5_fu_808_p1),64));
    zext_ln130_14_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_6_fu_816_p1),64));
    zext_ln130_15_cast_fu_846_p3 <= (ap_const_lv4_8 & feature_reg_1262);
    zext_ln130_15_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln130_15_cast_fu_846_p3),64));
    zext_ln130_1_cast_fu_580_p3 <= (ap_const_lv1_1 & feature_reg_1262);
    zext_ln130_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln130_1_cast_fu_580_p3),64));
    zext_ln130_2_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_fu_592_p1),64));
    zext_ln130_3_cast_fu_611_p3 <= (ap_const_lv2_2 & feature_reg_1262);
    zext_ln130_3_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln130_3_cast_fu_611_p3),64));
    zext_ln130_4_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_fu_623_p2),64));
    zext_ln130_5_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_1_fu_648_p1),64));
    zext_ln130_6_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln130_2_fu_656_p1),64));
    zext_ln130_7_cast_fu_681_p3 <= (ap_const_lv3_4 & feature_reg_1262);
    zext_ln130_7_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln130_7_cast_fu_681_p3),64));
    zext_ln130_8_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_1_fu_693_p2),64));
    zext_ln130_9_cast_fu_726_p3 <= (ap_const_lv3_5 & feature_reg_1262);
    zext_ln130_9_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln130_9_cast_fu_726_p3),64));
    zext_ln130_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln130_fu_552_p2),64));
end behav;
